package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import kotlin.Metadata;
import kotlin.Unit;
import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.api.MinecraftVersion;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.ccbluex.liquidbounce.value.IntegerValue;
import org.jetbrains.annotations.NotNull;

@ModuleInfo(
    name = "PingSpoof",
    description = "Spoofs your ping to a given value.",
    category = ModuleCategory.EXPLOIT,
    supportedVersions = { MinecraftVersion.MC_1_8}
)
@Metadata(
    mv = { 1, 1, 16},
    bv = { 1, 0, 3},
    k = 1,
    d1 = { "\u0000:\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\t\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\b\u0010\u000b\u001a\u00020\fH\u0016J\u0010\u0010\r\u001a\u00020\f2\u0006\u0010\u000e\u001a\u00020\u000fH\u0007J\u0010\u0010\u0010\u001a\u00020\f2\u0006\u0010\u000e\u001a\u00020\u0011H\u0007R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0005\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R*\u0010\u0006\u001a\u001e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t`\nX\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006\u0012"},
    d2 = { "Lnet/ccbluex/liquidbounce/features/module/modules/exploit/PingSpoof;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "maxDelayValue", "Lnet/ccbluex/liquidbounce/value/IntegerValue;", "minDelayValue", "packetQueue", "Ljava/util/HashMap;", "Lnet/ccbluex/liquidbounce/api/minecraft/network/IPacket;", "", "Lkotlin/collections/HashMap;", "onDisable", "", "onPacket", "event", "Lnet/ccbluex/liquidbounce/event/PacketEvent;", "onUpdate", "Lnet/ccbluex/liquidbounce/event/UpdateEvent;", "LiquidBounce"}
)
public final class PingSpoof extends Module {

    private final IntegerValue minDelayValue = (IntegerValue) (new IntegerValue("MinDelay", 500, 0, 5000) {
        protected void onChanged(int oldValue, int newValue) {
            int maxDelayValue = ((Number) PingSpoof.this.maxDelayValue.get()).intValue();

            if (maxDelayValue < newValue) {
                this.set((Object) Integer.valueOf(maxDelayValue));
            }

        }
    });
    private final IntegerValue maxDelayValue = (IntegerValue) (new IntegerValue("MaxDelay", 1000, 0, 5000) {
        protected void onChanged(int oldValue, int newValue) {
            int minDelayValue = ((Number) PingSpoof.this.minDelayValue.get()).intValue();

            if (minDelayValue > newValue) {
                this.set((Object) Integer.valueOf(minDelayValue));
            }

        }
    });
    private final HashMap packetQueue;

    public void onDisable() {
        this.packetQueue.clear();
    }

    @EventTarget
    public final void onPacket(@NotNull PacketEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        IPacket packet = event.getPacket();

        if (MinecraftInstance.classProvider.isCPacketKeepAlive(packet) || MinecraftInstance.classProvider.isCPacketClientStatus(packet)) {
            IEntityPlayerSP ientityplayersp = MinecraftInstance.mc.getThePlayer();

            if (ientityplayersp == null) {
                Intrinsics.throwNpe();
            }

            if (!ientityplayersp.isDead()) {
                ientityplayersp = MinecraftInstance.mc.getThePlayer();
                if (ientityplayersp == null) {
                    Intrinsics.throwNpe();
                }

                if (ientityplayersp.getHealth() > (float) 0 && !this.packetQueue.containsKey(packet)) {
                    event.cancelEvent();
                    HashMap hashmap = this.packetQueue;
                    boolean flag = false;
                    boolean flag1 = false;

                    synchronized (hashmap){}

                    try {
                        boolean $i$a$-synchronized-PingSpoof$onPacket$1 = false;

                        ((Map) this.packetQueue).put(packet, Long.valueOf(System.currentTimeMillis() + TimeUtils.randomDelay(((Number) this.minDelayValue.get()).intValue(), ((Number) this.maxDelayValue.get()).intValue())));
                        Unit unit = Unit.INSTANCE;
                    } finally {
                        ;
                    }
                }
            }
        }

    }

    @EventTarget
    public final void onUpdate(@NotNull UpdateEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        HashMap hashmap = this.packetQueue;
        boolean flag = false;
        boolean flag1 = false;

        synchronized (hashmap){}

        try {
            boolean $i$a$-synchronized-PingSpoof$onUpdate$1 = false;
            Map $this$forEach$iv = (Map) this.packetQueue;
            boolean $i$f$forEach = false;
            Map destination$iv$iv = (Map) (new LinkedHashMap());
            boolean $i$f$filterTo = false;
            boolean $dstr$packet$time = false;
            Iterator $i$a$-forEach-PingSpoof$onUpdate$1$2 = $this$forEach$iv.entrySet().iterator();

            while ($i$a$-forEach-PingSpoof$onUpdate$1$2.hasNext()) {
                Entry element$iv$iv = (Entry) $i$a$-forEach-PingSpoof$onUpdate$1$2.next();
                boolean packet = false;

                if (((Number) element$iv$iv.getValue()).longValue() >= System.currentTimeMillis()) {
                    destination$iv$iv.put(element$iv$iv.getKey(), element$iv$iv.getValue());
                }
            }

            $i$f$forEach = false;
            Map $this$filterTo$iv$iv = destination$iv$iv;
            boolean destination$iv$iv1 = false;
            Iterator $i$f$filterTo1 = $this$filterTo$iv$iv.entrySet().iterator();

            while ($i$f$filterTo1.hasNext()) {
                Entry element$iv = (Entry) $i$f$filterTo1.next();
                boolean $i$a$-forEach-PingSpoof$onUpdate$1$21 = false;
                boolean it = false;
                IPacket packet1 = (IPacket) element$iv.getKey();

                it = false;
                long time = ((Number) element$iv.getValue()).longValue();

                MinecraftInstance.mc.getNetHandler().addToSendQueue(packet1);
                this.packetQueue.remove(packet1, Long.valueOf(time));
            }

            Unit unit = Unit.INSTANCE;
        } finally {
            ;
        }
    }

    public PingSpoof() {
        boolean flag = false;
        HashMap hashmap = new HashMap();

        this.packetQueue = hashmap;
    }
}
