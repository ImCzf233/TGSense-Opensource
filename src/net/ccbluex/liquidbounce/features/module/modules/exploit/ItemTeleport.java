package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.vecmath.Vector3f;
import net.ccbluex.liquidbounce.api.enums.MaterialType;
import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.Render3DEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.ListValue;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

@ModuleInfo(
    name = "ItemTeleport",
    description = "Allows you to pick up items far away.",
    category = ModuleCategory.EXPLOIT
)
public class ItemTeleport extends Module {

    private final ListValue modeValue = new ListValue("Mode", new String[] { "New", "Old"}, "New");
    private final BoolValue resetAfterTp = new BoolValue("ResetAfterTP", true);
    private final ListValue buttonValue = new ListValue("Button", new String[] { "Left", "Right", "Middle"}, "Middle");
    private int delay;
    private WBlockPos endPos;
    private IMovingObjectPosition objectPosition;

    public void onDisable() {
        this.delay = 0;
        this.endPos = null;
        super.onDisable();
    }

    @EventTarget
    public void onUpdate(UpdateEvent event) {
        if (ItemTeleport.mc.getCurrentScreen() == null && Mouse.isButtonDown(Arrays.asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get())) && this.delay <= 0) {
            this.endPos = this.objectPosition.getBlockPos();
            IIBlockState thePlayer = BlockUtils.getState(this.endPos);

            if (thePlayer.getBlock().getMaterial(thePlayer) == ItemTeleport.classProvider.getMaterialEnum(MaterialType.AIR)) {
                this.endPos = null;
                return;
            }

            ClientUtils.displayChatMessage("§7[§8§lItemTeleport§7] §3Position was set to §8" + this.endPos.getX() + "§3, §8" + this.endPos.getY() + "§3, §8" + this.endPos.getZ());
            this.delay = 6;
        }

        if (this.delay > 0) {
            --this.delay;
        }

        IEntityPlayerSP ientityplayersp = ItemTeleport.mc.getThePlayer();

        if (ientityplayersp != null) {
            if (this.endPos != null && ientityplayersp.isSneaking()) {
                if (!ientityplayersp.getOnGround()) {
                    double endX = (double) this.endPos.getX() + 0.5D;
                    double endY = (double) this.endPos.getY() + 1.0D;
                    double endZ = (double) this.endPos.getZ() + 0.5D;
                    String s = ((String) this.modeValue.get()).toLowerCase();
                    byte b0 = -1;

                    switch (s.hashCode()) {
                    case 108960:
                        if (s.equals("new")) {
                            b0 = 1;
                        }
                        break;

                    case 110119:
                        if (s.equals("old")) {
                            b0 = 0;
                        }
                    }

                    Iterator iterator;
                    Vector3f vector3f;

                    label58:
                    switch (b0) {
                    case 0:
                        iterator = this.vanillaTeleportPositions(endX, endY, endZ, 4.0D).iterator();

                        while (true) {
                            if (!iterator.hasNext()) {
                                break label58;
                            }

                            vector3f = (Vector3f) iterator.next();
                            ItemTeleport.mc.getNetHandler().addToSendQueue(ItemTeleport.classProvider.createCPacketPlayerPosition((double) vector3f.getX(), (double) vector3f.getY(), (double) vector3f.getZ(), false));
                        }

                    case 1:
                        iterator = this.vanillaTeleportPositions(endX, endY, endZ, 5.0D).iterator();

                        while (iterator.hasNext()) {
                            vector3f = (Vector3f) iterator.next();
                            ItemTeleport.mc.getNetHandler().addToSendQueue(ItemTeleport.classProvider.createCPacketPlayerPosition(ientityplayersp.getPosX(), ientityplayersp.getPosY(), ientityplayersp.getPosZ(), true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue(ItemTeleport.classProvider.createCPacketPlayerPosition((double) vector3f.x, (double) vector3f.y, (double) vector3f.z, true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue(ItemTeleport.classProvider.createCPacketPlayerPosition(ientityplayersp.getPosX(), ientityplayersp.getPosY(), ientityplayersp.getPosZ(), true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue(ItemTeleport.classProvider.createCPacketPlayerPosition(ientityplayersp.getPosX(), ientityplayersp.getPosY() + 4.0D, ientityplayersp.getPosZ(), true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue(ItemTeleport.classProvider.createCPacketPlayerPosition((double) vector3f.x, (double) vector3f.y, (double) vector3f.z, true));
                            MovementUtils.forward(0.04D);
                        }
                    }

                    if (((Boolean) this.resetAfterTp.get()).booleanValue()) {
                        this.endPos = null;
                    }

                    ClientUtils.displayChatMessage("§7[§8§lItemTeleport§7] §3Tried to collect items");
                } else {
                    ientityplayersp.jump();
                }
            }

        }
    }

    @EventTarget
    public void onRender3D(Render3DEvent event) {
        this.objectPosition = ItemTeleport.mc.getThePlayer().rayTrace(1000.0D, event.getPartialTicks());
        if (this.objectPosition.getBlockPos() != null) {
            int x = this.objectPosition.getBlockPos().getX();
            int y = this.objectPosition.getBlockPos().getY();
            int z = this.objectPosition.getBlockPos().getZ();
            IIBlockState state = BlockUtils.getState(this.objectPosition.getBlockPos());

            if (!state.getBlock().getMaterial(state).equals(ItemTeleport.classProvider.getMaterialEnum(MaterialType.AIR))) {
                IRenderManager renderManager = ItemTeleport.mc.getRenderManager();

                GL11.glBlendFunc(770, 771);
                GL11.glEnable(3042);
                GL11.glLineWidth(2.0F);
                GL11.glDisable(3553);
                GL11.glDisable(2929);
                GL11.glDepthMask(false);
                IIBlockState state1 = BlockUtils.getState(this.objectPosition.getBlockPos().up());

                RenderUtils.glColor(!state1.getBlock().getMaterial(state1).equals(ItemTeleport.classProvider.getMaterialEnum(MaterialType.AIR)) ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90));
                RenderUtils.drawFilledBox(ItemTeleport.classProvider.createAxisAlignedBB((double) x - renderManager.getRenderPosX(), (double) (y + 1) - renderManager.getRenderPosY(), (double) z - renderManager.getRenderPosZ(), (double) x - renderManager.getRenderPosX() + 1.0D, (double) y + 1.2D - renderManager.getRenderPosY(), (double) z - renderManager.getRenderPosZ() + 1.0D));
                GL11.glEnable(3553);
                GL11.glEnable(2929);
                GL11.glDepthMask(true);
                GL11.glDisable(3042);
                RenderUtils.renderNameTag(Math.round(ItemTeleport.mc.getThePlayer().getDistance((double) x, (double) y, (double) z)) + "m", (double) x + 0.5D, (double) y + 1.7D, (double) z + 0.5D);
                ItemTeleport.classProvider.getGlStateManager().resetColor();
            }

        }
    }

    private List vanillaTeleportPositions(double tpX, double tpY, double tpZ, double speed) {
        ArrayList positions = new ArrayList();
        double posX = tpX - ItemTeleport.mc.getThePlayer().getPosX();
        double posZ = tpZ - ItemTeleport.mc.getThePlayer().getPosZ();
        float yaw = (float) (Math.atan2(posZ, posX) * 180.0D / 3.141592653589793D - 90.0D);
        double tmpY = ItemTeleport.mc.getThePlayer().getPosY();
        double steps = 1.0D;

        double d;

        for (d = speed; d < this.getDistance(ItemTeleport.mc.getThePlayer().getPosX(), ItemTeleport.mc.getThePlayer().getPosY(), ItemTeleport.mc.getThePlayer().getPosZ(), tpX, tpY, tpZ); d += speed) {
            ++steps;
        }

        for (d = speed; d < this.getDistance(ItemTeleport.mc.getThePlayer().getPosX(), ItemTeleport.mc.getThePlayer().getPosY(), ItemTeleport.mc.getThePlayer().getPosZ(), tpX, tpY, tpZ); d += speed) {
            double tmpX = ItemTeleport.mc.getThePlayer().getPosX() - Math.sin(Math.toRadians((double) yaw)) * d;
            double tmpZ = ItemTeleport.mc.getThePlayer().getPosZ() + Math.cos(Math.toRadians((double) yaw)) * d;

            tmpY -= (ItemTeleport.mc.getThePlayer().getPosY() - tpY) / steps;
            positions.add(new Vector3f((float) tmpX, (float) tmpY, (float) tmpZ));
        }

        positions.add(new Vector3f((float) tpX, (float) tpY, (float) tpZ));
        return positions;
    }

    private double getDistance(double x1, double y1, double z1, double x2, double y2, double z2) {
        double d0 = x1 - x2;
        double d1 = y1 - y2;
        double d2 = z1 - z2;

        return Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
    }
}
