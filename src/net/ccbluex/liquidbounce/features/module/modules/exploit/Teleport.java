package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import javax.vecmath.Vector3d;
import net.ccbluex.liquidbounce.api.enums.MaterialType;
import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.api.minecraft.util.WVec3;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MoveEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.Render3DEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.PathUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.ListValue;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

@ModuleInfo(
    name = "Teleport",
    description = "Allows you to teleport around.",
    category = ModuleCategory.EXPLOIT
)
public class Teleport extends Module {

    private final BoolValue ignoreNoCollision = new BoolValue("IgnoreNoCollision", true);
    private final ListValue modeValue = new ListValue("Mode", new String[] { "Blink", "Flag", "Rewinside", "OldRewinside", "Spoof", "Minesucht", "AAC3.5.0"}, "Blink");
    private final ListValue buttonValue = new ListValue("Button", new String[] { "Left", "Right", "Middle"}, "Middle");
    private final TickTimer flyTimer = new TickTimer();
    private boolean hadGround;
    private double fixedY;
    private final List packets = new ArrayList();
    private boolean disableLogger = false;
    private boolean zitter = false;
    private boolean doTeleport = false;
    private boolean freeze = false;
    private final TickTimer freezeTimer = new TickTimer();
    private int delay;
    private WBlockPos endPos;
    private IMovingObjectPosition objectPosition;

    public void onEnable() {
        if (((String) this.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
            ClientUtils.displayChatMessage("§c>>> §a§lTeleport §fAAC 3.5.0 §c<<<");
            ClientUtils.displayChatMessage("§cHow to teleport: §aPress " + (String) this.buttonValue.get() + " mouse button.");
            ClientUtils.displayChatMessage("§cHow to cancel teleport: §aDisable teleport module.");
        }

    }

    public void onDisable() {
        this.fixedY = 0.0D;
        this.delay = 0;
        Teleport.mc.getTimer().setTimerSpeed(1.0F);
        this.endPos = null;
        this.hadGround = false;
        this.freeze = false;
        this.disableLogger = false;
        this.flyTimer.reset();
        this.packets.clear();
        super.onDisable();
    }

    @EventTarget
    public void onUpdate(UpdateEvent event) {
        int buttonIndex = Arrays.asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get());
        IEntityPlayerSP thePlayer = Teleport.mc.getThePlayer();

        if (thePlayer != null) {
            if (((String) this.modeValue.get()).equals("AAC3.5.0")) {
                this.freezeTimer.update();
                if (this.freeze && this.freezeTimer.hasTimePassed(40)) {
                    this.freezeTimer.reset();
                    this.freeze = false;
                    this.setState(false);
                }

                if (!this.flyTimer.hasTimePassed(60)) {
                    this.flyTimer.update();
                    if (thePlayer.getOnGround()) {
                        thePlayer.jump();
                    } else {
                        MovementUtils.forward(this.zitter ? -0.21D : 0.21D);
                        this.zitter = !this.zitter;
                    }

                    this.hadGround = false;
                } else {
                    if (thePlayer.getOnGround()) {
                        this.hadGround = true;
                    }

                    if (this.hadGround) {
                        if (thePlayer.getOnGround()) {
                            thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() + 0.2D, thePlayer.getPosZ());
                        }

                        float f = 2.0F;

                        thePlayer.getCapabilities().setFlying(false);
                        thePlayer.setMotionX(0.0D);
                        thePlayer.setMotionY(0.0D);
                        thePlayer.setMotionZ(0.0D);
                        if (Teleport.mc.getGameSettings().getKeyBindJump().isKeyDown()) {
                            thePlayer.setMotionY(thePlayer.getMotionY() + 2.0D);
                        }

                        if (Teleport.mc.getGameSettings().getKeyBindSneak().isKeyDown()) {
                            thePlayer.setMotionY(thePlayer.getMotionY() - 2.0D);
                        }

                        MovementUtils.strafe(2.0F);
                        if (Mouse.isButtonDown(buttonIndex) && !this.doTeleport) {
                            thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() - 11.0D, thePlayer.getPosZ());
                            this.disableLogger = true;
                            this.packets.forEach((packet) -> {
                                Teleport.mc.getNetHandler().addToSendQueue(packet);
                            });
                            this.freezeTimer.reset();
                            this.freeze = true;
                        }

                        this.doTeleport = Mouse.isButtonDown(buttonIndex);
                    }
                }
            } else {
                if (Teleport.mc.getCurrentScreen() == null && Mouse.isButtonDown(buttonIndex) && this.delay <= 0) {
                    this.endPos = this.objectPosition.getBlockPos();
                    IIBlockState endX = BlockUtils.getState(this.endPos);

                    if (endX.getBlock().getMaterial(endX).equals(Teleport.classProvider.getMaterialEnum(MaterialType.AIR))) {
                        this.endPos = null;
                        return;
                    }

                    ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Position was set to §8" + this.endPos.getX() + "§3, §8" + ((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? (double) (this.endPos.getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY) + "§3, §8" + this.endPos.getZ());
                    this.delay = 6;
                }

                if (this.delay > 0) {
                    --this.delay;
                }

                if (this.endPos != null) {
                    double d0 = (double) this.endPos.getX() + 0.5D;
                    double endY = (BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? (double) (this.endPos.getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY;
                    double endZ = (double) this.endPos.getZ() + 0.5D;
                    String s = ((String) this.modeValue.get()).toLowerCase();
                    byte b0 = -1;

                    switch (s.hashCode()) {
                    case -436679847:
                        if (s.equals("oldrewinside")) {
                            b0 = 3;
                        }
                        break;

                    case 3145580:
                        if (s.equals("flag")) {
                            b0 = 1;
                        }
                        break;

                    case 93826908:
                        if (s.equals("blink")) {
                            b0 = 0;
                        }
                        break;

                    case 709940890:
                        if (s.equals("minesucht")) {
                            b0 = 4;
                        }
                        break;

                    case 1388740000:
                        if (s.equals("rewinside")) {
                            b0 = 2;
                        }
                    }

                    switch (b0) {
                    case 0:
                        if (thePlayer.isSneaking()) {
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
                            PathUtils.findBlinkPath(d0, endY, endZ).forEach((vector3d) -> {
                                Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(vector3d.x, vector3d.y, vector3d.z, true));
                                thePlayer.setPosition(d0, endY, endZ);
                            });
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + d0 + "§3, §8" + endY + "§3, §8" + endZ);
                        }
                        break;

                    case 1:
                        if (thePlayer.isSneaking()) {
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(d0, endY, endZ, true));
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 5.0D, thePlayer.getPosZ(), true));
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(d0, endY, endZ, true));
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + 0.5D, thePlayer.getPosY(), thePlayer.getPosZ() + 0.5D, true));
                            MovementUtils.forward(0.04D);
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + d0 + "§3, §8" + endY + "§3, §8" + endZ);
                        }
                        break;

                    case 2:
                        thePlayer.setMotionY(0.1D);
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(d0, endY, endZ, true));
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.6D, thePlayer.getPosZ(), true));
                        if ((int) thePlayer.getPosX() == (int) d0 && (int) thePlayer.getPosY() == (int) endY && (int) thePlayer.getPosZ() == (int) endZ) {
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + d0 + "§3, §8" + endY + "§3, §8" + endZ);
                            this.endPos = null;
                        } else {
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");
                        }
                        break;

                    case 3:
                        thePlayer.setMotionY(0.1D);
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(d0, endY, endZ, true));
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(d0, endY, endZ, true));
                        Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                        if ((int) thePlayer.getPosX() == (int) d0 && (int) thePlayer.getPosY() == (int) endY && (int) thePlayer.getPosZ() == (int) endZ) {
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + d0 + "§3, §8" + endY + "§3, §8" + endZ);
                            this.endPos = null;
                        } else {
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");
                        }

                        MovementUtils.forward(0.04D);
                        break;

                    case 4:
                        if (thePlayer.isSneaking()) {
                            Teleport.mc.getNetHandler().addToSendQueue(Teleport.classProvider.createCPacketPlayerPosition(d0, endY, endZ, true));
                            ClientUtils.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + d0 + "§3, §8" + endY + "§3, §8" + endZ);
                        }
                    }
                }

            }
        }
    }

    @EventTarget
    public void onRender3D(Render3DEvent event) {
        if (!((String) this.modeValue.get()).equals("AAC3.5.0")) {
            IEntityPlayerSP thePlayer = Teleport.mc.getThePlayer();

            if (thePlayer != null) {
                WVec3 entityLookVec = thePlayer.getLookVec();
                WVec3 lookVec = new WVec3(entityLookVec.getXCoord() * 300.0D, entityLookVec.getYCoord() * 300.0D, entityLookVec.getZCoord() * 300.0D);
                WVec3 posVec = new WVec3(thePlayer.getPosX(), thePlayer.getPosY() + 1.62D, thePlayer.getPosZ());

                this.objectPosition = Teleport.mc.getTheWorld().rayTraceBlocks(posVec, posVec.add(lookVec), false, ((Boolean) this.ignoreNoCollision.get()).booleanValue(), false);
                if (this.objectPosition != null && this.objectPosition.getBlockPos() != null) {
                    WBlockPos belowBlockPos = new WBlockPos(this.objectPosition.getBlockPos().getX(), this.objectPosition.getBlockPos().getY() - 1, this.objectPosition.getBlockPos().getZ());

                    this.fixedY = Teleport.classProvider.isBlockFence(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? (Teleport.mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((double) this.objectPosition.getBlockPos().getX() + 0.5D - thePlayer.getPosX(), (double) this.objectPosition.getBlockPos().getY() + 1.5D - thePlayer.getPosY(), (double) this.objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.getPosZ())).isEmpty() ? 0.5D : 0.0D) : (Teleport.classProvider.isBlockFence(BlockUtils.getBlock(belowBlockPos)) ? (Teleport.mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((double) this.objectPosition.getBlockPos().getX() + 0.5D - thePlayer.getPosX(), (double) this.objectPosition.getBlockPos().getY() + 0.5D - thePlayer.getPosY(), (double) this.objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.getPosZ())).isEmpty() && BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) != null ? -0.5D : 0.0D) : (Teleport.classProvider.isBlockSnow(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? 0.875D : 0.0D));
                    int x = this.objectPosition.getBlockPos().getX();
                    double y = (BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? (double) (this.objectPosition.getBlockPos().getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(Teleport.mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) - 1.0D + this.fixedY;
                    int z = this.objectPosition.getBlockPos().getZ();

                    if (!Teleport.classProvider.isBlockAir(BlockUtils.getBlock(this.objectPosition.getBlockPos()))) {
                        IRenderManager renderManager = Teleport.mc.getRenderManager();

                        GL11.glBlendFunc(770, 771);
                        GL11.glEnable(3042);
                        GL11.glLineWidth(2.0F);
                        GL11.glDisable(3553);
                        GL11.glDisable(2929);
                        GL11.glDepthMask(false);
                        RenderUtils.glColor(((String) this.modeValue.get()).equalsIgnoreCase("minesucht") && (double) thePlayer.getPosition().getY() != y + 1.0D ? new Color(255, 0, 0, 90) : (!Teleport.mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((double) x + 0.5D - thePlayer.getPosX(), y + 1.0D - thePlayer.getPosY(), (double) z + 0.5D - thePlayer.getPosZ())).isEmpty() ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90)));
                        RenderUtils.drawFilledBox(Teleport.classProvider.createAxisAlignedBB((double) x - renderManager.getRenderPosX(), y + 1.0D - renderManager.getRenderPosY(), (double) z - renderManager.getRenderPosZ(), (double) x - renderManager.getRenderPosX() + 1.0D, y + 1.2D - renderManager.getRenderPosY(), (double) z - renderManager.getRenderPosZ() + 1.0D));
                        GL11.glEnable(3553);
                        GL11.glEnable(2929);
                        GL11.glDepthMask(true);
                        GL11.glDisable(3042);
                        RenderUtils.renderNameTag(Math.round(thePlayer.getDistance((double) x + 0.5D, y + 1.0D, (double) z + 0.5D)) + "m", (double) x + 0.5D, y + 1.7D, (double) z + 0.5D);
                        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                    }

                }
            }
        }
    }

    @EventTarget
    public void onMove(MoveEvent event) {
        if (((String) this.modeValue.get()).equalsIgnoreCase("aac3.5.0") && this.freeze) {
            event.zeroXZ();
        }

    }

    @EventTarget
    public void onPacket(PacketEvent event) {
        IPacket packet = event.getPacket();

        if (!this.disableLogger) {
            if (Teleport.classProvider.isCPacketPlayer(packet)) {
                ICPacketPlayer packetPlayer = packet.asCPacketPlayer();
                String s = ((String) this.modeValue.get()).toLowerCase();
                byte b0 = -1;

                switch (s.hashCode()) {
                case 109651721:
                    if (s.equals("spoof")) {
                        b0 = 0;
                    }
                    break;

                case 325230105:
                    if (s.equals("aac3.5.0")) {
                        b0 = 1;
                    }
                }

                switch (b0) {
                case 0:
                    if (this.endPos != null) {
                        packetPlayer.setX((double) this.endPos.getX() + 0.5D);
                        packetPlayer.setY((double) (this.endPos.getY() + 1));
                        packetPlayer.setZ((double) this.endPos.getZ() + 0.5D);
                        Teleport.mc.getThePlayer().setPosition((double) this.endPos.getX() + 0.5D, (double) (this.endPos.getY() + 1), (double) this.endPos.getZ() + 0.5D);
                    }
                    break;

                case 1:
                    if (!this.flyTimer.hasTimePassed(60)) {
                        return;
                    }

                    event.cancelEvent();
                    if (!Teleport.classProvider.isCPacketPlayerPosition(packet) && !Teleport.classProvider.isCPacketPlayerPosLook(packet)) {
                        return;
                    }

                    this.packets.add(packet);
                }
            }

        }
    }

    public String getTag() {
        return (String) this.modeValue.get();
    }
}
