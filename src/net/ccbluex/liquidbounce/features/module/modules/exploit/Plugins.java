package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import joptsimple.internal.Strings;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt;
import net.ccbluex.liquidbounce.api.minecraft.network.play.server.ISPacketTabComplete;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import org.jetbrains.annotations.NotNull;

@ModuleInfo(
    name = "Plugins",
    description = "Allows you to see which plugins the server is using.",
    category = ModuleCategory.EXPLOIT
)
@Metadata(
    mv = { 1, 1, 16},
    bv = { 1, 0, 3},
    k = 1,
    d1 = { "\u0000&\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\b\u0010\u0005\u001a\u00020\u0006H\u0016J\u0010\u0010\u0007\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\tH\u0007J\u0010\u0010\n\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\u000bH\u0007R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006\f"},
    d2 = { "Lnet/ccbluex/liquidbounce/features/module/modules/exploit/Plugins;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "tickTimer", "Lnet/ccbluex/liquidbounce/utils/timer/TickTimer;", "onEnable", "", "onPacket", "event", "Lnet/ccbluex/liquidbounce/event/PacketEvent;", "onUpdate", "Lnet/ccbluex/liquidbounce/event/UpdateEvent;", "LiquidBounce"}
)
public final class Plugins extends Module {

    private final TickTimer tickTimer = new TickTimer();

    public void onEnable() {
        if (MinecraftInstance.mc.getThePlayer() != null) {
            MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketTabComplete("/"));
            this.tickTimer.reset();
        }
    }

    @EventTarget
    public final void onUpdate(@NotNull UpdateEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        this.tickTimer.update();
        if (this.tickTimer.hasTimePassed(20)) {
            ClientUtils.displayChatMessage("§cPlugins check timed out...");
            this.tickTimer.reset();
            this.setState(false);
        }

    }

    @EventTarget
    public final void onPacket(@NotNull PacketEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        if (MinecraftInstance.classProvider.isSPacketTabComplete(event.getPacket())) {
            ISPacketTabComplete s3APacketTabComplete = event.getPacket().asSPacketTabComplete();
            ArrayList plugins = new ArrayList();
            String[] commands = s3APacketTabComplete.getCompletions();
            String[] astring = commands;
            int i = commands.length;

            for (int j = 0; j < i; ++j) {
                String command1 = astring[j];
                List command = StringsKt.split$default((CharSequence) command1, new String[] { ":"}, false, 0, 6, (Object) null);

                if (command.size() > 1) {
                    String pluginName = StringsKt.replace$default((String) command.get(0), "/", "", false, 4, (Object) null);

                    if (!plugins.contains(pluginName)) {
                        plugins.add(pluginName);
                    }
                }
            }

            Collections.sort((List) plugins);
            if (!plugins.isEmpty()) {
                ClientUtils.displayChatMessage("§aPlugins §7(§8" + plugins.size() + "§7): §c" + Strings.join((String[]) plugins.toArray(new String[0]), "§7, §c"));
            } else {
                ClientUtils.displayChatMessage("§cNo plugins found.");
            }

            this.setState(false);
            this.tickTimer.reset();
        }

    }
}
