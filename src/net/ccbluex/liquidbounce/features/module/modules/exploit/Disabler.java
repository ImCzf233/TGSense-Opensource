package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.Iterator;
import java.util.LinkedList;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.jvm.internal.Intrinsics;
import me.utils.PacketUtils;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerBlockPlacement;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerLook;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerPosLook;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.injection.backend.PacketImpl;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import org.jetbrains.annotations.NotNull;

@ModuleInfo(
    name = "Disabler",
    description = "Spoofs your ping to a given value.",
    category = ModuleCategory.EXPLOIT
)
@Metadata(
    mv = { 1, 1, 16},
    bv = { 1, 0, 3},
    k = 1,
    d1 = { "\u0000Z\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\u0010\u0010\u001b\u001a\u00020\u001c2\u0006\u0010\u001d\u001a\u00020\u0018H\u0002J\b\u0010\u001e\u001a\u00020\u001cH\u0016J\u0010\u0010\u001f\u001a\u00020\u001c2\u0006\u0010 \u001a\u00020!H\u0007J\u0010\u0010\"\u001a\u00020\u001c2\u0006\u0010 \u001a\u00020#H\u0007R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0005\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\bX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\t\u001a\u00020\bX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u000b\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\f\u001a\u00020\rX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u000e\u001a\u00020\u000fX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0010\u001a\u00020\u000fX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0011\u001a\u00020\u0012X\u0082\u0004¢\u0006\u0002\n\u0000R\u001a\u0010\u0013\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00160\u00150\u0014X\u0082\u0004¢\u0006\u0002\n\u0000R\u0014\u0010\u0017\u001a\u00020\u00188VX\u0096\u0004¢\u0006\u0006\u001a\u0004\b\u0019\u0010\u001a¨\u0006$"},
    d2 = { "Lnet/ccbluex/liquidbounce/features/module/modules/exploit/Disabler;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "debugValue", "Lnet/ccbluex/liquidbounce/value/BoolValue;", "fakeLagAttackValue", "fakeLagBlockValue", "fakeLagDelay", "Lnet/ccbluex/liquidbounce/utils/timer/MSTimer;", "fakeLagDuration", "fakeLagPosValue", "fakeLagSpoofValue", "isSent", "", "lagDelayValue", "Lnet/ccbluex/liquidbounce/value/IntegerValue;", "lagDurationValue", "modeValue", "Lnet/ccbluex/liquidbounce/value/ListValue;", "packetBuffer", "Ljava/util/LinkedList;", "Lnet/minecraft/network/Packet;", "Lnet/minecraft/network/play/INetHandlerPlayServer;", "tag", "", "getTag", "()Ljava/lang/String;", "debugMessage", "", "str", "onDisable", "onPacket", "event", "Lnet/ccbluex/liquidbounce/event/PacketEvent;", "onUpdate", "Lnet/ccbluex/liquidbounce/event/UpdateEvent;", "LiquidBounce"}
)
public final class Disabler extends Module {

    private final ListValue modeValue = new ListValue("PacketMode", new String[] { "FakeLag"}, "FakeLag");
    private final IntegerValue lagDelayValue = new IntegerValue("LagDelay", 0, 0, 2000);
    private final IntegerValue lagDurationValue = new IntegerValue("LagDuration", 200, 100, 1000);
    private final BoolValue debugValue = new BoolValue("Debug", false);
    private final BoolValue fakeLagBlockValue = new BoolValue("FakeLagBlock", true);
    private final BoolValue fakeLagPosValue = new BoolValue("FakeLagPosition", true);
    private final BoolValue fakeLagAttackValue = new BoolValue("FakeLagAttack", true);
    private final BoolValue fakeLagSpoofValue = new BoolValue("FakeLagC03Spoof", false);
    private boolean isSent;
    private final MSTimer fakeLagDelay = new MSTimer();
    private final MSTimer fakeLagDuration = new MSTimer();
    private final LinkedList packetBuffer = new LinkedList();

    public void onDisable() {
        String s = (String) this.modeValue.get();
        boolean packet = false;

        if (s == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        } else {
            String s1 = s.toLowerCase();

            Intrinsics.checkExpressionValueIsNotNull(s1, "(this as java.lang.String).toLowerCase()");
            s = s1;
            switch (s.hashCode()) {
            case -1084944867:
                if (s.equals("fakelag")) {
                    Iterator iterator = this.packetBuffer.iterator();

                    while (iterator.hasNext()) {
                        Packet packet1 = (Packet) iterator.next();

                        Intrinsics.checkExpressionValueIsNotNull(packet1, "packet");
                        PacketUtils.sendPacketNoEvent(packet1);
                    }

                    this.packetBuffer.clear();
                }

            default:
            }
        }
    }

    @EventTarget
    public final void onUpdate(@NotNull UpdateEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        String s = (String) this.modeValue.get();
        boolean packet = false;

        if (s == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        } else {
            String s1 = s.toLowerCase();

            Intrinsics.checkExpressionValueIsNotNull(s1, "(this as java.lang.String).toLowerCase()");
            s = s1;
            switch (s.hashCode()) {
            case -1084944867:
                if (s.equals("fakelag")) {
                    if (!this.fakeLagDelay.hasTimePassed((long) ((Number) this.lagDelayValue.get()).intValue())) {
                        this.fakeLagDuration.reset();
                    }

                    if (this.fakeLagDuration.hasTimePassed((long) ((Number) this.lagDurationValue.get()).intValue())) {
                        this.fakeLagDelay.reset();
                        this.fakeLagDuration.reset();
                        Iterator iterator = this.packetBuffer.iterator();

                        while (iterator.hasNext()) {
                            Packet packet1 = (Packet) iterator.next();

                            Intrinsics.checkExpressionValueIsNotNull(packet1, "packet");
                            PacketUtils.sendPacketNoEvent(packet1);
                        }

                        this.debugMessage("Release buf(size=" + this.packetBuffer.size() + ')');
                        this.isSent = true;
                        this.packetBuffer.clear();
                    }
                }

            default:
            }
        }
    }

    @EventTarget
    public final void onPacket(@NotNull PacketEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        IPacket $this$unwrap$iv = event.getPacket();
        boolean $i$f$unwrap = false;
        Packet packet = ((PacketImpl) $this$unwrap$iv).getWrapped();
        String $this$unwrap$iv1 = (String) this.modeValue.get();

        $i$f$unwrap = false;
        if ($this$unwrap$iv1 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        } else {
            String s = $this$unwrap$iv1.toLowerCase();

            Intrinsics.checkExpressionValueIsNotNull(s, "(this as java.lang.String).toLowerCase()");
            $this$unwrap$iv1 = s;
            switch ($this$unwrap$iv1.hashCode()) {
            case -1084944867:
                if ($this$unwrap$iv1.equals("fakelag") && this.fakeLagDelay.hasTimePassed((long) ((Number) this.lagDelayValue.get()).intValue())) {
                    if (this.isSent && ((Boolean) this.fakeLagSpoofValue.get()).booleanValue()) {
                        PacketUtils.sendPacketNoEvent((Packet) (new CPacketPlayer(true)));
                        if (((Number) this.lagDurationValue.get()).intValue() >= 300) {
                            PacketUtils.sendPacketNoEvent((Packet) (new CPacketPlayer(true)));
                        }

                        this.isSent = false;
                    }

                    if (packet instanceof CPacketKeepAlive || packet instanceof CPacketConfirmTransaction) {
                        event.cancelEvent();
                        this.packetBuffer.add(packet);
                    }

                    if (((Boolean) this.fakeLagAttackValue.get()).booleanValue() && (packet instanceof CPacketUseEntity || packet instanceof CPacketAnimation)) {
                        event.cancelEvent();
                        this.packetBuffer.add(packet);
                        if (packet instanceof CPacketAnimation) {
                            return;
                        }
                    }

                    if (((Boolean) this.fakeLagBlockValue.get()).booleanValue() && (packet instanceof CPacketPlayerDigging || packet instanceof ICPacketPlayerBlockPlacement || packet instanceof CPacketAnimation)) {
                        event.cancelEvent();
                        this.packetBuffer.add(packet);
                    }

                    if (((Boolean) this.fakeLagPosValue.get()).booleanValue() && (packet instanceof CPacketPlayer || packet instanceof Position || packet instanceof ICPacketPlayerLook || packet instanceof ICPacketPlayerPosLook || packet instanceof CPacketEntityAction)) {
                        event.cancelEvent();
                        this.packetBuffer.add(packet);
                    }
                }

            default:
            }
        }
    }

    private final void debugMessage(String str) {
        if (((Boolean) this.debugValue.get()).booleanValue()) {
            ClientUtils.displayChatMessage(" [Disabler] " + str);
        }

    }

    @NotNull
    public String getTag() {
        return (String) this.modeValue.get();
    }
}
