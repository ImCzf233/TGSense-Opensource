package net.ccbluex.liquidbounce.features.module.modules.exploit;

import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.api.IClassProvider;
import net.ccbluex.liquidbounce.api.minecraft.client.gui.IGuiScreen;
import net.ccbluex.liquidbounce.api.minecraft.client.gui.inventory.IGuiContainer;
import net.ccbluex.liquidbounce.api.minecraft.client.network.IINetHandlerPlayClient;
import net.ccbluex.liquidbounce.api.minecraft.inventory.IContainer;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ISPacketCloseWindow;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.KeyEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.ScreenEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import org.jetbrains.annotations.NotNull;

@ModuleInfo(
    name = "KeepContainer",
    description = "Allows you to open a formerly closed inventory container everywhere. (Press INSERT Key to open)",
    category = ModuleCategory.EXPLOIT
)
@Metadata(
    mv = { 1, 1, 16},
    bv = { 1, 0, 3},
    k = 1,
    d1 = { "\u0000,\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\b\u0010\u0005\u001a\u00020\u0006H\u0016J\u0010\u0010\u0007\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\tH\u0007J\u0010\u0010\n\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\u000bH\u0007J\u0010\u0010\f\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\rH\u0007R\u0010\u0010\u0003\u001a\u0004\u0018\u00010\u0004X\u0082\u000e¢\u0006\u0002\n\u0000¨\u0006\u000e"},
    d2 = { "Lnet/ccbluex/liquidbounce/features/module/modules/exploit/KeepContainer;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "container", "Lnet/ccbluex/liquidbounce/api/minecraft/client/gui/inventory/IGuiContainer;", "onDisable", "", "onGui", "event", "Lnet/ccbluex/liquidbounce/event/ScreenEvent;", "onKey", "Lnet/ccbluex/liquidbounce/event/KeyEvent;", "onPacket", "Lnet/ccbluex/liquidbounce/event/PacketEvent;", "LiquidBounce"}
)
public final class KeepContainer extends Module {

    private IGuiContainer container;

    public void onDisable() {
        if (this.container != null) {
            IINetHandlerPlayClient iinethandlerplayclient = MinecraftInstance.mc.getNetHandler();
            IClassProvider iclassprovider = MinecraftInstance.classProvider;
            IGuiContainer iguicontainer = this.container;

            if (this.container == null) {
                Intrinsics.throwNpe();
            }

            IContainer icontainer = iguicontainer.getInventorySlots();

            if (icontainer == null) {
                Intrinsics.throwNpe();
            }

            iinethandlerplayclient.addToSendQueue((IPacket) iclassprovider.createCPacketCloseWindow(icontainer.getWindowId()));
        }

        this.container = (IGuiContainer) null;
    }

    @EventTarget
    public final void onGui(@NotNull ScreenEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        IGuiScreen guiScreen = event.getGuiScreen();

        if (MinecraftInstance.classProvider.isGuiContainer(guiScreen) && !MinecraftInstance.classProvider.isGuiInventory(guiScreen)) {
            if (guiScreen == null) {
                Intrinsics.throwNpe();
            }

            this.container = guiScreen.asGuiContainer();
        }

    }

    @EventTarget
    public final void onKey(@NotNull KeyEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        if (event.getKey() == 210) {
            if (this.container == null) {
                return;
            }

            MinecraftInstance.mc.displayGuiScreen((IGuiScreen) this.container);
        }

    }

    @EventTarget
    public final void onPacket(@NotNull PacketEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        if (MinecraftInstance.classProvider.isCPacketCloseWindow(event.getPacket())) {
            event.cancelEvent();
        } else if (MinecraftInstance.classProvider.isSPacketCloseWindow(event.getPacket())) {
            ISPacketCloseWindow packetCloseWindow = event.getPacket().asSPacketCloseWindow();

            if (this.container != null) {
                IGuiContainer iguicontainer = this.container;

                if (this.container == null) {
                    Intrinsics.throwNpe();
                }

                if (iguicontainer.getInventorySlots() != null) {
                    int i = packetCloseWindow.getWindowId();
                    IGuiContainer iguicontainer1 = this.container;

                    if (this.container == null) {
                        Intrinsics.throwNpe();
                    }

                    IContainer icontainer = iguicontainer1.getInventorySlots();

                    if (icontainer == null) {
                        Intrinsics.throwNpe();
                    }

                    if (i == icontainer.getWindowId()) {
                        this.container = (IGuiContainer) null;
                    }
                }
            }
        }

    }
}
